/*Nesting Determine whether a given string of parentheses (single type) is properly nested.
Task description
A string S consisting of N characters is called properly nested if:

S is empty;
S has the form "(U)" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, string "(()(())())" is properly nested but string "())" isn't.

Write a function:

function solution(S);

that, given a string S consisting of N characters, returns 1 if string S is properly nested and 0 otherwise.

For example, given S = "(()(())())", the function should return 1 and given S = "())", the function should return 0, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..1,000,000];
string S consists only of the characters "(" and/or ")".*/
//100%
function solution(S) {
  let openBrackets = [];  
  let bracketsArray = S.split("");

  for (let bracket of bracketsArray) {    
    if (bracket === "(") {      
      openBrackets.push(bracket);    
    } else if (openBrackets.length != 0 && bracket === ")") {
      openBrackets.pop()    
    } else if (openBrackets.length === 0 && bracket === ")") {
      return 0    
    }  
  }  return openBrackets.length === 0? 1 : 0;
}


//87%
function solution(S) {
  let n = S.length;
  if (n % 2 == 1) {
    return 0;
  }
  let t = 0;
  for (let i in S) {
    let s = S[i];
    t += s == '(' ? 1 : -1;
    if (t < 0) {
      return 0;
    }
  }
  return t == 0 ? 1 : 0;
}
